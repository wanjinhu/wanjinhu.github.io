

[
  
  
    {
      "title"    : "页面没有找到",
      "url"      : "http://localhost:4000/404.html",
      "keywords" : "404"
    } ,
  
  
  
    {
      "title"    : "About",
      "url"      : "http://localhost:4000/about/",
      "keywords" : "Wanjin Hu, 胡万金"
    } ,
  
  
  
    {
      "title"    : "归档",
      "url"      : "http://localhost:4000/archives/",
      "keywords" : "归档"
    } ,
  
  
  
    {
      "title"    : "Categories",
      "url"      : "http://localhost:4000/categories/",
      "keywords" : "分类"
    } ,
  
  
  
    {
      "title"    : "捐助 / Donate",
      "url"      : "http://localhost:4000/donate/",
      "keywords" : "Donate"
    } ,
  
  
  
    {
      "title"    : "Fragments",
      "url"      : "http://localhost:4000/fragments/",
      "keywords" : "fragments"
    } ,
  
  
  
  
  
    {
      "title"    : "Links",
      "url"      : "http://localhost:4000/links/",
      "keywords" : "友情链接"
    } ,
  
  
  
    {
      "title"    : "mindmap",
      "url"      : "http://localhost:4000/mindmap-viewer/",
      "keywords" : "mindmap"
    } ,
  
  
  
    {
      "title"    : "Open Source Projects",
      "url"      : "http://localhost:4000/open-source/",
      "keywords" : "开源,open-source,GitHub,开源项目"
    } ,
  
  
  
  
  
    {
      "title"    : "Wiki",
      "url"      : "http://localhost:4000/wiki/",
      "keywords" : "维基, Wiki"
    } ,
  
  
  
  
  
  
  
  
  
  

  
    {
      "title"    : "宏基因组分析流程",
      "category" : "Metagenomic",
      "content": "提供一个宏基因组分析流程。 Here is a metagenomic sequence data analysis pipeline, nothing different with other pipelines. But if you want to get to know the metagenomic analysis pipeline step by step, maybe you can get some details from this repository. And it is suitable for the beginners i think. Scripts and test files you can find here: Metagenomic-Analysis-Pipeline Pipeline overview 🐫 Raw sequence quality trim Host reference sequence remove Metaphlan for composition of microbial communities Sequence assembly Gene prediction Remove redundancy gene and build non-redundant geneset Function annotation using emapper Organize function results table Quick start 🦏 $python pipe_metagenome.py -h usage: ================================================================= python pipe_metagenome.py  t--fastq_list fq.list  t--output_dir result  t--ref ref_bowtie2_index ref_bowtie2_index: canis: /root/database/Canis_GCF_000002285.5/Canis_GCF_000002285_5 human: /root/database/hg38_GCF_000001405.40/GCF_000001405.40/hg38 ================================================================= Pipeline of metagenome optional arguments: -h, --help  show this help message and exit -l FQLIST, --fastq_list FQLIST     raw fq list -o OUTDIR, --output_dir OUTDIR     result output -r REF, --ref REF  ref genome bowtie2 index What you need to do is to provide two input files: –fastq_list # sample - fq_R1 - fq_R2 list, format like fq.list –ref # host reference genome bowtie2 index And set output dir --output_dir, all of output results would be included. Output files explanation 🐊 Output files tree (not show all files) ├── 00-result     # most important results in this fold │   ├── 00_merged_abundance_table.txt # composition of microbial communities │   ├── 01_metaphlan_phylum.txt  # communities in phylum level │   ├── 02_metaphlan_class.txt  # communities in class level │   ├── 03_metaphlan_order.txt  # communities in order level │   ├── 04_metaphlan_family.txt  # communities in family level │   ├── 05_metaphlan_genus.txt  # communities in genus level │   ├── 06_metaphlan_species.txt  # communities in species level │   ├── KO_samples.xls   # KEGG KO gene composition table │   └── pathway_samples.xls   # KEGG pathway composition table ├── 01-fastp_trim ├── 02-ref_remove ├── 03-metaphlan ├── 04-megahit ├── 05-prodigal ├── 06-cdhit ├── 07-emapper ├── 08-sam_count ├── 09-emapper_kegg Output important result files explanation metaphlan_diff-levels.txt column 1 : communities information column 2 ~ : communities abundance percent of samples  clade_name tC1 k__Bacteria;p__Firmicutes t86.51132 k__Bacteria;p__Actinobacteria t6.52203 k__Bacteria;p__Bacteroidetes t4.24729 k__Bacteria;p__Proteobacteria t1.96422 k__Bacteria;p__Fusobacteria t0.75514 k__Bacteria;p__Tenericutes t0.0 k__Bacteria;p__Spirochaetes t0.0 k__Bacteria;p__Verrucomicrobia t0.0 ...  KO_samples.xls column 1 : KO gene name column 2 : KO gene description column 3 : KO gene id column 4 ~ : KO gene number of samples  KO_name tKO_des tKO tC1 E1.1.1.1, adh talcohol dehydrogenase [EC:1.1.1.1] tK00001 t2817.0 AKR1A1, adh talcohol dehydrogenase (NADP+) [EC:1.1.1.2] tK00002 t254.0 hom thomoserine dehydrogenase [EC:1.1.1.3] tK00003 t2890.0 BDH, butB t(R,R)-butanediol dehydrogenase / meso-butanediol dehydrogenase / diacetyl reductase [EC:1.1.1.4 1.1.1.- 1.1.1.303] tK00004 t20.0 ...  pathway_samples.xls column 1 : pathway level 1 column 2 : pathway level 2 column 3 : pathway level 3 column 4 : pathway id column 5 ~ : pathway gene number of samples  level1 tlevel2 tlevel3 tpathway tC1 Metabolism tCarbohydrate metabolism tGlycolysis / Gluconeogenesis tko00010 t91005.0 Metabolism tCarbohydrate metabolism tCitrate cycle (TCA cycle) tko00020 t31442.0 Metabolism tCarbohydrate metabolism tPentose phosphate pathway tko00030 t53905.0 Metabolism tCarbohydrate metabolism tPentose and glucuronate interconversions tko00040 t21334.0 ...   Step by step 🦥 Step1 Raw sequence quality trim using fastp fastp -i sample_1.fastq.gz     -o sample_clean.1.fastq.gz     -I sample_2.fastq.gz     -O sample_clean.2.fastq.gz     -w 8 -h sample.html -j sample.json Step2 Host reference sequence remove bowtie2 -x ref_bowtie2_index -1 sample_clean.1.fastq.gz -2 sample_clean.2.fastq.gz -S sample.sam 2&gt;sample.mapping.log samtools fastq -@ 8 -f 4 sample.sam -1 sample.unmap.1.fastq.gz -2 sample.unmap.2.fastq.gz -s sample.unmap.single.fastq.gz Step3 Metaphlan for composition of microbial communities zcat sample.unmap.1.fastq.gz sample.unmap.2.fastq.gz|metaphlan --input_type fastq --bowtie2out sample_bowtie2.bz2 --output_file sample_metaphlan.tsv --nproc 8 # when you install metaphlan in the system, you will get script 'merge_metaphlan_tables.py', that's for merge different samples metaphlan result in one file, like: merge_metaphlan_tables.py *.tsv &gt; 00_merged_abundance_table.txt grep -E '(p__)|(clade_name)' 00_merged_abundance_table.txt |grep -v 'c__'|sed 's/|/;/g' &gt; 01_metaphlan_phylum.txt grep -E '(c__)|(clade_name)' 00_merged_abundance_table.txt |grep -v 'o__'|sed 's/|/;/g' &gt; 02_metaphlan_class.txt grep -E '(o__)|(clade_name)' 00_merged_abundance_table.txt |grep -v 'f__'|sed 's/|/;/g' &gt; 03_metaphlan_order.txt grep -E '(f__)|(clade_name)' 00_merged_abundance_table.txt |grep -v 'g__'|sed 's/|/;/g' &gt; 04_metaphlan_family.txt grep -E '(g__)|(clade_name)' 00_merged_abundance_table.txt |grep -v 's__'|sed 's/|/;/g' &gt; 05_metaphlan_genus.txt grep -E '(s__)|(clade_name)' 00_merged_abundance_table.txt |grep -v 't__'|sed 's/|/;/g' &gt; 06_metaphlan_species.txt Step4 Sequence assembly and trim contigs which length &lt; 500bp megahit -1 sample.unmap.1.fastq.gz -2 sample.unmap.2.fastq.gz -o sample_megahit --out-prefix sample -t 8 seqkit seq -m 500 sample_megahit/sample.contigs.fa --remove-gaps &gt; sample.contigs_500.fa sed -i 's/&gt;/&gt;sample_/g' sample.contigs_500.fa Step5 Gene prediction using prodigal prodigal -p meta -a sample_prot.faa -m -d sample_nucl.fna -o sample_genes.gff -f gff -s sample.stat -i sample.contigs_500.fa Step6 Remove redundancy gene and build non-redundant geneset cat sample1_prot.faa sample2_prot.faa ... &gt; prot.faa cat sample1_nucl.fna sample2_nucl.fna ... &gt; nucl.fna cd-hit -i prot.faa -o prot_nonerude.faa -c 0.95 -T 8 -n 5 -d 0 -aS 0.9 -g 1 -sc 1 -sf 1 -M 0 grep '&gt;' prot_nonerude.faa|awk -F ' ' '{print $1}'|sed 's/&gt;//g' &gt; prot_nonerude.list seqtk subseq nucl.fna prot_nonerude.list &gt; nucl_nonerude.fna bwa index nucl_nonerude.fna -p geneset_bwa bioawk -c fastx '{print $name, length($seq)}' nucl_nonerude.fna &gt; geneset_length.txt Step7 Function annotation using emapper # when you install emapper in the system, you will get script 'emapper.py' emapper.py -i prot_nonerude.faa -o eggnog --cpu 0 --usemem cut -f1,12 eggnog.emapper.annotations|grep -v ^#|sed 's/ko://g'|sed '1i gene  tko'|grep -v - &gt; KEGG_KO.txt cut -f1,13 eggnog.emapper.annotations|grep -v ^#|sed '1i gene  tpathway'|grep -v - &gt; KEGG_PATHWAY.txt Step8 Gene num count bwa mem -t 4 geneset_bwa sample.unmap.1.fastq.gz sample.unmap.2.fastq.gz | samtools view -bS - | samtools sort - &gt; sample_mapping_geneset.bam samtools view -F 4 -F 256 -F 2048 sample_mapping_geneset.bam|awk '{if($3!=*) print $3}'|sort| uniq -c|awk 'BEGIN {FS= ;OFS=,} {print $2,$1}' | awk 'BEGIN {FS=,;OFS=,} {if ($2 &gt; 1) print $1  t$2; else print $1  t0}'|sed '1i gene  tsample' &gt; sample.count Step9 Organize function results table # using /kegg/kegg.py to analysis, like: $python kegg.py -h usage: python kegg.py -kk KEGG_KO.txt -kp KEGG_PATHWAY.txt -mt merged_file.txt -ok out_KO.xls -op out_pathway.xls Merge KO/pathway count table from eggnog result. optional arguments: -h, --help  show this help message and exit -kk KEGGKO, --kegg_KO KEGGKO     Sample's kegg KO information, such as KEGG_KO.txt -kp KEGGPATHWAY, --kegg_pathway KEGGPATHWAY     Sample's kegg pathway information, such as     KEGG_PATHWAY.txt -mt MERGETABLE, --merge_table MERGETABLE     Sample's merged gene count table, such as     merged_file.txt -ok OUTKO, --out_KO OUTKO     Output KO result, such as out_KO.xls -op OUTPATHWAY, --out_pathway OUTPATHWAY     Output pathway result, such as out_pathway.xls -t TMP, --tmp TMP  Tmp files dir Contact 🐖 Wanjin Hu (wanjin.hu@outlook.com) ",
      "url"      : "http://localhost:4000/2023/08/10/pipeline-metagenomic-analysis/",
      "keywords" : "Metagenomic, Microbiome"
    } ,
  
    {
      "title"    : "《人生十二法则》读后的个人思考",
      "category" : "Life",
      "content": "真的有12条法则可以来指导你过的人生么？我开始思考自己的人生。 看到书名，你估计可能会想这本书就是一个特傻的鸡汤文，这都什么年代了还搞这一出？这个时代提倡的是个性，是包容，是多元，是自由，是独立，是开放，是博爱。真就掌握了你说的这12条法则就能过好我的人生么？用脚趾头想想都觉得不可能，你了解我是谁么？你知道我经历了什么？你知道我最近有多痛苦么？没人可以定义我的人生，我的人生只能我自己来定义。我有我自己的想法和选择，我和其他人并不一样。所以我压根就懒得听你扯这些大道理，该懂得道理我都懂，我只是做不到。 以上这些想法多少在你的脑海中有过，再加上现在互联网的高度发达，各种社交媒体的包装，还有各种现实问题的困扰，你很难不陷入到这种思维中。平时生活工作总会带着面具，虚伪的对外界展示自己，到了深夜再进行人生思考，各种emo的情绪就会爆发，再影响第二天自己的生活，循环往复。说实话，没有人会不去思考自己的人生，人生存在的目的价值，但是正如上面提到的那些，执拗的去秉持自己的观点，而这些观点甚至不是自己思考获得的，而是各种形式主义灌输给我们的。这样的思考只会让人抑郁和空虚。 人在年轻的时候，既缺乏独立也缺少认知，因为还没来得及积累阅历和智慧来建立起自己的个人标准，所以大多数情况下，只好和他人做比较。大体上，我想人生的成长过程中总会经历这个阶段。如果你不想和他人做比较，就得逐渐建立起自己的标准，有明确的世界观、人生观和价值观。否则一句“我只想做自己，不想和他人比较”之类的话，就是很可笑和没有份量的，可能只是自己逃避的借口。到底这种听起来很酷的自我宣言属于哪一种，恐怕只有自己内心深处明白。我希望不要自欺欺人，至少对自己做到真诚。向内求，不是欺骗自己的空话和逃避的借口，而是符合自我标准的真情实感，这也不是平白无故就可以想明白的，去读书/学习/总结，至少对现在的我来说是一个很好的向求内的路径。 《人生十二法则》是乔丹•皮得森 (Jordan B. Peterson) 教授很早之前写的一本书。了解到皮得森教授是因为他之前的一个访谈类节目的片段（视频链接我会放在最后），他聊到的是一个人在面对撒谎和讲出事实的选择时，为什么要勇敢的讲真话。逃避或者说出真相，不仅仅是两个不同的选择，更是两条人生道路，两种完全不同的存在方式。我需要指出的是，这里讲出事实，不是让你不顾及任何后果的说出真相，而是要明白真相，并做出正确的选择。遇到争议不要害怕讲出自己的观点，依照事实原则，遵循内心的价值观，勇敢表明自己的观点，很有可能你会遭到批判和冷嘲热讽，但是没关系，你每一次的行为就是为塑造你个人价值观的一次巩固。这本书是我探索人生意义上的一本很重要的书，某些时候内心的那种澎湃感，由于自己匮乏的认知和语言能力很难表达出来，看到这本书的时候，我似乎找到了一种表达自己内心想法的途径，书里的某些观点与我的价值观不谋而合，让我觉得自己的价值观是正确的，同时我也可以用这些观点来指导自己，让自己变得更好。 《人生十二法则》的写法很有趣，每条法则都用一个小故事作为引言，也很符合皮得森教授的风格，他本身也是大学的心理学教授(不知道现在还在不在职)，他从几年前就开始在网络上发自己的上课视频，他很擅长用古希腊的神话故事或者其他的故事来引导听众。同时他一直在用严肃认真的态度来对待每个抛给他的问题，我非常欣赏皮得森教授的这种做法，现在这个时代，大家鼓吹的是个性、幽默和个人魅力塑造，以及其他各种无意义和浮于表面的词语，而皮得森教授则用严肃的态度来引导大家思考人生，我觉得这是很有必要的。他的态度和行为都让人感觉很值得学习。 下面是皮得森教授在书中总结的十二条人生法则：  法则一 获胜的龙虾从不低头：笔直站立，昂首挺胸 法则二 像照顾生病的宠物一样关心自己：待己如助人 法则三 摆脱损友：与真心希望你好的人做朋友 法则四 战胜内心的批评家：和昨天的自己比，别和今天的别人比 法则五 管教你家的小怪物：别让孩子做出令你讨厌他的事 法则六 当痛苦到想诅咒一切：批判世界之前先清理你的房间 法则七 苏格拉底的选择：追求意义，拒绝苟且 法则八 不买醉鬼卖的东西：说真话，或者至少别撒谎 法则九 别偷走来访者的问题：假设你聆听的人知道你不知道的事 法则十 不要无视地毯下的龙：直面问题，言辞精确 法则十一 不要打扰玩滑板的孩子们：承认现实，反对偏见 法则十二 当你在街上遇到一只猫时，摸摸它：关注存在的善 批判世界之前先清理你的房间。我觉得这是整本书的基调，在你没有负起对自己人生的责任时，不要过多关注世界的纷扰，而是先整理好自己，让自己变得更有责任感。是的，责任感。现在大家好像在个人生活中不怎么提到这个词了，因为它有点沉重和落于时代，但我觉得还是很重要。就像书中写的，你要成为你父亲葬礼上最值得依靠的人，为你的家人负起责任来。当然有些事情只有经历过之后才会知道，特别是过生活，你想的特别美好的时候，更多是纸上谈兵，我想表明的是这当然不假，这和12条法则并不冲突，甚至这12条法则可以作为你生活工作的指导思想之一。但是你需要提前知道这些信息，提前在你的内心和脑海中种下一颗坚韧的种子，然后把每一次的经历都作为其成长的肥料。罗曼罗兰说过一句话，“生活中只有一种正真的英雄主义，就是认清生活的真相之后依然热爱它”。所以请不要害怕生活中遇到的挫折、困难，明确你自己的人生指导法则，这12条法则只是皮得森教授自己作为临床心理学家的总结，我们可以作为参考，还是需要记录适合自己的人生法则。但是，对我自己来说，责任、坚韧、诚实和追求意义这些存在了很久的人生品质，毫无疑问会作为我人生法则之书的坚实基础。 我还特别想要指出一点的是，这12条法则多数是要求你从自身做起，和昨天的自己比，别和今天的别人比。和别人比较是造成你生活痛苦的重要原因之一，因为这样有了期待、有了嫉妒，你大脑中的多巴胺欲望回路被持续刺激，只想要更多，这样在原本就是痛苦的人生基础上更加的痛苦。还有，这些法则永远要通过你自身的理解，融入到你的生活工作中，用来指导你的人生，千万不要作为你卖弄的资本，想要强加在别人身上，遇到生活过的艰难的人，多给他们报有一点善意吧，不要说那些过得不好是自身不努力的屁话，你的这些诅咒最终都会被你自己反噬。这个世界包含的比你关注的多太多了，你必须认真分配有限的资源。 苏格拉底的选择：追求意义，拒绝苟且。 我的选择：承担责任，追求价值，寻找意义。 相关链接 乔丹•皮得森教授的YouTube主页 豆瓣：人生十二法则 乔丹•皮得森教授分享片段：要敢于表达自我并证明自己 ",
      "url"      : "http://localhost:4000/2023/08/30/reading-12rules-for-life/",
      "keywords" : "人生意义, 阅读, Life"
    } ,
  
    {
      "title"    : "GitHub",
      "category" : "",
      "content": "打开/下载文件加速  项目内的文件 比如要下载 https://github.com/junegunn/vim-plug/plug.vim，那可以将 github.com 替换成 fastly.jsdelivr.net/gh，最终地址 https://fastly.jsdelivr.net/gh/junegunn/vim-plug/plug.vim 参考 https://mazhuang.org/2020/05/01/cdn-for-github-pages/   Releases 里的文件 比如要下载 https://github.com/PowerShell/PowerShell/releases/download/v7.1.0-preview.6/PowerShell-7.1.0-preview.6-win-x64.zip，可以将它填到 https://d.serctl.com/ 下载。 参考 https://toolwa.com/github/  ",
      "url"      : "http://localhost:4000/wiki/github/",
      "keywords" : "GitHub"
    } ,
  
    {
      "title"    : "Vim",
      "category" : "",
      "content": "移动 以字（符）为单位    功能  按键     上  k    下  j    左  h    右  l   以单词为单位    功能  按键     前一个单词尾  ge    后一个单词首  w    本单词首（已在本词首则跳到前一单词首）  b    本单词尾（已在本词尾则跳到后一单词尾）  e   以屏幕为单位    功能  按键     向下翻页  CTRL-f    向上翻页  CTRL-b    向下翻半页  CTRL-d    向上翻半页  CTRL-u    向上一行  CTRL-y    向下一行  CTRL-e    光标移到屏幕上方  H    光标移到屏幕中间  M    光标移到屏幕下方  L    光标所在位置移到屏幕上方  zt    光标所在位置移到屏幕中间  zz    光标所在位置移到屏幕下方  zb   行号    功能  按键     跳到第 num 行  :num 或 numG 或 numgg   文件    功能  按键     跳到文件头  gg    跳到文件尾  G   编辑 复制    功能  按键     复制光标所在单词  yiw    复制光标所在行  yy   粘贴    功能  按键     在光标之后粘贴  p    在光标之前粘贴  P   剪切    功能  按键     剪切选中区域  d    剪切光标所在行  dd   替换    功能  按键     将全文中的 str1 替换为 str2  :%s/str1/str2/g    将 1 到 5 行中的 str1 替换为 str2  :1,5s/str1/str2/g   大小写    功能  按键     将选中内容大小写互换  ~    将选中内容全转为小写  gu    将选中内容全转为大写  gU    将当前行变成小写  guu    将当前行变成大写  gUU    将匹配内容替换为大写  :%s/xxx/  U&amp;/g    将匹配内容替换为小写  :%s/xxx/  L&amp;/g   注：&amp; 代表正则表达式全部匹配项，另外还有   1、’  2’、…、  9 代表第 1 到 9 个匹配项。 选择    功能  按键     选中上一次选择的区域  gv    选中括号内区域  vi{、vi[、vi(   搜索    功能  按键     向下查找字符串  /str    向上查找字符串  ?str    查找下一个  n    查找上一个  N    向下查找光标所在单词  *    向下查找光标所在单词  #   正则表达式    功能  按键     匹配单词左边界    &lt;    匹配单词右边界    &gt;    去重  :g/^  (.*  )$    1/d   常用    功能  按键     删除空行  :g/^$/d    撤销/UNDO  u    重做/REDO  C-r    统计行/单词/字符/字节数  g C-g    去掉 UTF-8 BOM  :set nobomb    保留 UTF-8 BOM  :set bomb   全局    功能  按键     退出  :q    强制执行  !    执行外部命令  :!   文件操作    功能  按键     打开  :e    打开文件对话框  :bro e    保存  :w    另存为对话框  :bro w    查看历史文件列表  :ol    查看并打开历史文件  :bro ol    重命名当前文件  :f filename   vimdiff    功能  按键     移动到上一个不同处  [c    移动到下一个不同处  ]c    该差异点使用当前文件的  dp    该差异点使用其它文件的  do    手动刷新重新比较  :diffupdate   Buffer    功能  按键     查看 Buffer 列表  :ls    转到 Buffer 列表中的下一个 Buffer  :bn    转到 Buffer 列表中的上一个 Buffer  :bp    转到 Buffer 列表中的 num 号 Buffer  :bnum    你之前待过的一个 Buffer  :b#    从 Buffer 列表中删除 num 号 Buffer  :bdnum   组合命令 可以使用 | 来组合命令，比如 cmd1 | cmd2。 代码    功能  按键     格式化代码  gg=G    去除 1-20 行首的行号  :1,20s/^    s  *[0-9]  *    s  *//g    展开全部折叠  zR    展开当前层级折叠  zr    全部折叠  zM    当前层级折叠  zm    切换折叠/展开  za    递归折叠/展开当前大区块  zA    折叠当前区块  zc    递归折叠当前大区块  zC    展开当前区块  zo    递归展开当前大区块  zO    格式化 json 数据  :%!python -m json.tool    缩进当前行  &gt;&gt;    反缩进当前行  &lt;&lt;   modeline 写法： vim: set ft=markdown: vim: ft=markdown // vim: noai:ts=4:sw=4 /* vim: noai:ts=4:sw=4 */ 插件 CtrlP 基础按键 C-p    功能  按键     刷新列表  F5    切换文件/缓冲区/MRU  C-f/b    切换全路径搜索/文件名搜索  C-d    切换正则表达式模式  C-r    上/下一个选项  C-k/j    在新标签/垂直分割/水平分割打开文件  C-t/v/x    历史选择记录的上/下一条  C-p/n    创建文件和它的父路径  C-y    标记并打开多个文件  C-z C-o    退出 CtrlP  C-c   LeaderF    功能  按键     打开文件  Leader-f    打开缓冲区  Leader-b    打开 MRU  Leader-m（自定义的）    退出  C-c    切换模糊查找和正则查找  C-r    粘贴  C-v    清空输入  C-u    上/下一个选项  C-k/j    在新标签/垂直分割/水平分割打开文件  C-t/]/v    刷新列表  F5   vim-table-mode    功能  按键     删除列  Leader-tdc    删除行  Leader-tdd    重新格式化表格  Leader-tr   markdown-preview.nvim    功能  按键     预览  F5    停止预览  F6   导出 PDF：预览以后，使用浏览器的「打印」功能，打印机选「另存为 PDF」，取消「页眉和页脚」，然后点保存即可。 命令行 打开 Vim 时跳转到指定行： vim +[num] filename num 表示行号，不填则跳转到文件末尾。 ",
      "url"      : "http://localhost:4000/wiki/vim/",
      "keywords" : "Vim"
    } ,
  
    {
      "title"    : "MySQL 表空间碎片回收",
      "category" : "",
      "content": "从 MySQL 表中大量删除数据后，有可能表占用的空间并不会马上回收掉，此时如果在意空间占用，可以主动进行空间碎片回收。 查看表空间碎片占用 方法一： SELECT table_schema db,   table_name,   data_free,   engine FROM information_schema.tables  WHERE table_schema NOT IN ('information_schema', 'mysql')  AND data_free &gt; 0 and table_name = 'xxx' ORDER BY DATA_FREE DESC; 方法二： show table status like 'xxx'; data_free 字段对应的值就是碎片字节数。 表空间碎片回收 -- 适用 InnoDB 表 ALTER TABLE xxx engine = InnoDB 有一篇相关的文章讲得比较好可以参考：https://www.cnblogs.com/wanng/p/mysql-recycle-table-space.html ",
      "url"      : "http://localhost:4000/fragment/mysql-space-recover/",
      "keywords" : "MySQL"
    } ,
  
    {
      "title"    : "Fragment Template",
      "category" : "",
      "content": "Content here ",
      "url"      : "http://localhost:4000/fragment/template/",
      "keywords" : "keyword1, keyword2"
    } 
  
]

